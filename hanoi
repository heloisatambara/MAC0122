 # Exercício 2 - MAC 122 - PDA
 # Heloísa Tambara
 # NUSP: 12556819
 
def Hanoi(n, torreA, torreB, torreAux, isfirst = True): # o último parametro diferencia as chamadas recursivas das chamadas do usuário
    if isfirst == True: # cria uma lista dos estados e adiciona todos os discos na primeira torre
        global st
        d = '\u2588'
        stA, stB, stC = [], [], []
        st = [stA, stB, stC]
        for k in range(1, n+1):
            stA.append(k)
            stB.append(0)
            stC.append(0)
            print(f'\t{k * d}')
        else:
            stA.sort(reverse=True) # acerta a ordem dos discos
            print('\t0\t\t1\t\t2')

        
    if n == 1:
         # mover disco 1 da torreA para a torreB
        Movimente(1, torreA, torreB, st)
    else:
         # n - 1 discos da torreA para torreAux com torreB auxiliar
        Hanoi(n - 1, torreA, torreAux, torreB, False)
         # mover disco n da torreA para torreB
        Movimente(n, torreA, torreB, st)
         # n - 1 discos da torreAux para a torreB com torreA auxiliar
        Hanoi(n - 1, torreAux, torreB, torreA, False)
        
         
        
def Movimente(k, origem, destino, st):
    print("mover disco ", k, " da torre ", origem, " para a torre ", destino)
    for i in range(len(st[0])):
        if st[origem][i] == k: # acha o disco na origem e retira
            st[origem][i] = 0
    for i in range(len(st[0])):        
        if st[destino][i] == 0: # coloca o disco na primeira posição da torre destino que não está ocupada
            st[destino][i] = k
            break       
    graphMove(st)



def graphMove(l):
    d = '\u2588'
    t = '\t'
    n = len(l[0])
    for k in range(n-1, -1, -1):
        print()
        for j in range(3):
            if l[j][k] == 0:
                print((n//2)*t, end='') # deixando sempre a altura para caber os n discos, printa um espaço no lugar se não houver discos, e o número do disco se houver discos
            else:
                print(f'{l[j][k]*d}{(n//2)*t}', end='')
    else:
        print(f'\n0{(n//2)*t}1{(n//2)*t}2')
    

def main():
    while True:
        n = input('Quantos discos na sua torre? obs.: 0 para o programa. ')
        try:
            n = int(n)
            if n == 0: return
            Hanoi(n, 0, 1, 2)
        except: print('Digite um número inteiro') 
    

main()


